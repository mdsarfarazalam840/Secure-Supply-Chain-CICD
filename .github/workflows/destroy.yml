name: Destroy AWS Infrastructure

on:
  workflow_dispatch:  # This lets you trigger manually from the GitHub Actions UI
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
        default: ''

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: secure-supply-chain

jobs:
  destroy:
    name: Comprehensive Infrastructure Destruction
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'DESTROY'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh

      - name: Pre-destroy cleanup
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
        run: |
          echo "üßπ Starting pre-destroy cleanup..."
          
          # Delete any remaining load balancers
          echo "Deleting Application Load Balancers..."
          aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `secure-supply-chain`)].LoadBalancerArn' --output text | xargs -I {} aws elbv2 delete-load-balancer --load-balancer-arn {} || echo "No load balancers to delete"
          
          # Delete any remaining target groups
          echo "Deleting Target Groups..."
          aws elbv2 describe-target-groups --query 'TargetGroups[?contains(TargetGroupName, `secure-supply-chain`)].TargetGroupArn' --output text | xargs -I {} aws elbv2 delete-target-group --target-group-arn {} || echo "No target groups to delete"
          
          # Delete any remaining security groups (except default)
          echo "Deleting Security Groups..."
          aws ec2 describe-security-groups --query 'SecurityGroups[?contains(GroupName, `secure-supply-chain`) && GroupName != `default`].GroupId' --output text | xargs -I {} aws ec2 delete-security-group --group-id {} || echo "No security groups to delete"
          
          # Delete any remaining CloudWatch log groups
          echo "Deleting CloudWatch Log Groups..."
          aws logs describe-log-groups --log-group-name-prefix "/aws/eks/${PROJECT_NAME}" --query 'logGroups[].logGroupName' --output text | xargs -I {} aws logs delete-log-group --log-group-name {} || echo "No log groups to delete"
          
          echo "‚úÖ Pre-destroy cleanup completed"

      - name: Destroy Kubernetes Resources
        working-directory: ./terraform/k8s
        run: |
          echo "üóëÔ∏è Destroying Kubernetes resources..."
          terraform init -reconfigure
          # Discover cluster details to satisfy required variables
          CLUSTER_NAME=$(aws eks list-clusters --region "${AWS_REGION}" --query "clusters[?contains(@, '${PROJECT_NAME}')][0]" --output text)
          if [ -z "${CLUSTER_NAME}" ] || [ "${CLUSTER_NAME}" = "None" ]; then
            echo "No matching EKS cluster found for project '${PROJECT_NAME}'. Skipping K8s destroy."
            exit 0
          fi
          echo "Found cluster: ${CLUSTER_NAME}"
          DESC=$(aws eks describe-cluster --region "${AWS_REGION}" --name "${CLUSTER_NAME}" --query 'cluster.{endpoint:endpoint,ca:certificateAuthority.data}' --output json)
          export TF_VAR_cluster_name="${CLUSTER_NAME}"
          export TF_VAR_cluster_endpoint=$(echo "${DESC}" | jq -r .endpoint)
          export TF_VAR_cluster_ca_certificate=$(echo "${DESC}" | jq -r .ca)
          export TF_VAR_common_tags='{}'
          terraform destroy -auto-approve -input=false || echo "No K8s resources to destroy"

      - name: Destroy Infrastructure
        working-directory: ./terraform/infra
        run: |
          echo "üóëÔ∏è Destroying AWS infrastructure..."
          terraform init -reconfigure
          
          # Show current state before destruction
          echo "üìã Current Terraform state:"
          terraform state list || echo "No state found (remote or not initialized). Continuing..."
          
          # Destroy infrastructure
          terraform destroy -auto-approve -input=false -var="aws_region=${{ env.AWS_REGION }}"
          
          echo "‚úÖ Infrastructure destruction completed"

      - name: Post-destroy cleanup
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
        run: |
          echo "üßπ Starting post-destroy cleanup..."
          
          # Delete any remaining EBS volumes
          echo "Deleting EBS volumes..."
          aws ec2 describe-volumes --query 'Volumes[?contains(Tags[?Key==`Name`].Value, `secure-supply-chain`)].VolumeId' --output text | xargs -I {} aws ec2 delete-volume --volume-id {} || echo "No volumes to delete"
          
          # Delete any remaining snapshots
          echo "Deleting EBS snapshots..."
          aws ec2 describe-snapshots --owner-ids self --query 'Snapshots[?contains(Description, `secure-supply-chain`)].SnapshotId' --output text | xargs -I {} aws ec2 delete-snapshot --snapshot-id {} || echo "No snapshots to delete"
          
          # Delete any remaining NAT Gateways
          echo "Deleting NAT Gateways..."
          aws ec2 describe-nat-gateways --query 'NatGateways[?contains(Tags[?Key==`Name`].Value, `secure-supply-chain`)].NatGatewayId' --output text | xargs -I {} aws ec2 delete-nat-gateway --nat-gateway-id {} || echo "No NAT gateways to delete"
          
          # Delete any remaining Internet Gateways
          echo "Deleting Internet Gateways..."
          aws ec2 describe-internet-gateways --query 'InternetGateways[?contains(Tags[?Key==`Name`].Value, `secure-supply-chain`)].InternetGatewayId' --output text | xargs -I {} aws ec2 detach-internet-gateway --internet-gateway-id {} --vpc-id $(aws ec2 describe-internet-gateways --query 'InternetGateways[?contains(Tags[?Key==`Name`].Value, `secure-supply-chain`)].Attachments[0].VpcId' --output text) && aws ec2 delete-internet-gateway --internet-gateway-id {} || echo "No internet gateways to delete"
          
          echo "‚úÖ Post-destroy cleanup completed"

      - name: Verify Destruction
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
        run: |
          echo "üîç Verifying destruction..."
          
          # Check for remaining EKS clusters
          REMAINING_CLUSTERS=$(aws eks list-clusters --query 'clusters[?contains(@, `secure-supply-chain`)]' --output text)
          if [ -n "$REMAINING_CLUSTERS" ]; then
            echo "‚ö†Ô∏è Warning: The following EKS clusters still exist:"
            echo "$REMAINING_CLUSTERS"
          else
            echo "‚úÖ No EKS clusters found"
          fi
          
          # Check for remaining VPCs
          REMAINING_VPCS=$(aws ec2 describe-vpcs --query 'Vpcs[?contains(Tags[?Key==`Name`].Value, `secure-supply-chain`)].VpcId' --output text)
          if [ -n "$REMAINING_VPCS" ]; then
            echo "‚ö†Ô∏è Warning: The following VPCs still exist:"
            echo "$REMAINING_VPCS"
          else
            echo "‚úÖ No VPCs found"
          fi
          
          # Check for remaining IAM roles
          REMAINING_ROLES=$(aws iam list-roles --query 'Roles[?contains(RoleName, `secure-supply-chain`)].RoleName' --output text)
          if [ -n "$REMAINING_ROLES" ]; then
            echo "‚ö†Ô∏è Warning: The following IAM roles still exist:"
            echo "$REMAINING_ROLES"
          else
            echo "‚úÖ No IAM roles found"
          fi
          
          echo "üéâ Destruction verification completed!"

  confirmation-required:
    name: Confirmation Required
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy != 'DESTROY'
    steps:
      - name: Show Confirmation Message
        run: |
          echo "‚ùå Destruction cancelled!"
          echo "To destroy the infrastructure, you must type 'DESTROY' in the confirmation field."
          echo "This is a safety measure to prevent accidental destruction of resources."
          exit 1
